---
title: "Strings: Extra Practice"
format:
  html: default
editor_options: 
  chunk_output_type: console
---
  
You can download this .qmd file from [here](https://github.com/proback/264_fall_2024/blob/main/10_strings_part3.qmd).  Just hit the Download Raw File button.

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(rvest)
library(httr)
```


## On Your Own - Extra practice with strings and regular expressions

1. Describe the equivalents of ?, +, * in {m,n} form.

```{r}
# ? = {0,1}
# + = {1,}
# * = {0,}
```


2. Describe, in words, what the expression "(.)(.)\\2\\1" will match, and provide a word or expression as an example.

```{r}
# A pair of characters followed by the same pair in reversed order.
str_detect("ABBA", "(.)(.)\\2\\1")
```


3. Produce an R string which the regular expression represented by "\\..\\..\\.." matches.  In other words, find a string `y` below that produces a TRUE in `str_detect`.

Many possibilities.... here are two examples:

```{r}
#y <- "???"
#str_detect(y, "\\..\\..\\..")

y <- "stuff.h.i.stuff"
str_detect(y, "\\..\\..\\..")

y <- ".h.i.i"
str_detect(y, "\\..\\..\\..")
```


4. Solve with `str_subset()`, using the words from `stringr::words`:

- Find all words that start or end with x.
- Find all words that start with a vowel and end with a consonant.
- Find all words that start and end with the same letter

```{r}
str_subset(words, "^x|x$")
str_subset(words, "^[aeiou].*[^aeiou]$") 
str_subset(words, "^(.).*\\1$")
```


5. What words in `stringr::words` have the highest number of vowels? What words have the highest proportion of vowels? (Hint: what is the denominator?)  Figure this out using the tidyverse and piping, starting with `as_tibble(words) |>`.

```{r}
as_tibble(words) |>
  mutate(num_vowels = str_count(value, "[aeiou]"),
         prop_vowels = num_vowels / str_length(value)) |>
  arrange(-num_vowels)

as_tibble(words) |>
  mutate(num_vowels = str_count(value, "[aeiou]"),
         prop_vowels = num_vowels / str_length(value)) |>
  arrange(-prop_vowels)
```


6. From the Harvard sentences data, use `str_extract` to produce a tibble with 3 columns:  the sentence, the first word in the sentence, and the first word ending in "ed" (NA if there isn't one).

```{r}
as_tibble(sentences) |>
  rename("sentence" = "value") |>
  mutate(first_word = str_extract(sentences, "[a-zA-Z']+"),
         first_ed_word = str_extract(sentence, "\\b[A-Za-z']+ed\\b"))
```


7. Find and output all contractions (words with apostrophes) in the Harvard sentences, assuming no sentence has multiple contractions.

```{r}
contraction <- "([A-Za-z]+)'([A-Za-z]+)"
sentences |>
  str_subset(contraction) |>
  str_extract(contraction)

as_tibble(sentences) |>
  filter(str_detect(value, contraction)) |>
  mutate(contraction = str_extract(value, contraction))
```


8. *Carefully* explain what the code below does, both line by line and in general terms.

```{r}
temp <- str_replace_all(words, "^([A-Za-z])(.*)([a-z])$", "\\3\\2\\1")
as_tibble(words) |>
  semi_join(as_tibble(temp)) |>
  print(n = Inf)
```

The first line switches the first and last letters in all words.  Then we start with the words as a tibble and perform a filtering join, where only words that also appear in the list of words with first and last letters exchanged are kept and printed.  The overall effect is a tibble containing 45 words that also appear in words after the first and last letters are exchanged.


## Coco and Rotten Tomatoes

We will check out the Rotten Tomatoes page for the 2017 movie Coco, scrape information from that page (we'll get into web scraping in a few weeks!), clean it up into a usable format, and answer some questions using strings and regular expressions.

```{r}
# used to work
# coco <- read_html("https://www.rottentomatoes.com/m/coco_2017")

robotstxt::paths_allowed("https://www.rottentomatoes.com/m/coco_2017")

library(polite)
coco <- "https://www.rottentomatoes.com/m/coco_2017" |>
  bow() |> scrape()

top_reviews <- "https://www.rottentomatoes.com/m/coco_2017/reviews?type=top_critics" |> 
  bow() |> 
  scrape()
top_reviews <- html_nodes(top_reviews, ".review-text")
top_reviews <- html_text(top_reviews)

user_reviews <- "https://www.rottentomatoes.com/m/coco_2017/reviews?type=user" |> 
  bow() |> 
  scrape()
user_reviews <- html_nodes(user_reviews, ".js-review-text")
user_reviews <- html_text(user_reviews)
```


9. `top_reviews` is a character vector containing the 20 most recent critic reviews (along with some other junk) for Coco, while `user_reviews` is a character vector with the 10 most recent user reviews.

a) Explain how the code below helps clean up both `user_reviews` and `top_reviews` before we start using them.

```{r}
user_reviews <- str_trim(user_reviews)
top_reviews <- str_trim(top_reviews)
```

The user reviews have extra characters and spaces at the beginning and end that we need to trim off.


b) Print out the critic reviews where the reviewer mentions "emotion" or "cry".  Think about various forms ("cried", "emotional", etc.)  You may want to turn reviews to all lower case before searching for matches.

c) In critic reviews, replace all instances where "Pixar" is used with its full name: "Pixar Animation Studios".

d) Find out how many times each user uses "I" in their review.  Remember that it could be used as upper or lower case, at the beginning, middle, or end of a sentence, etc.

e) Do critics or users have more complex reviews, as measured by average number of commas used?  Be sure your code weeds out commas used in numbers, such as "12,345".

```{r}
str_subset(str_to_lower(top_reviews), "cried|cry|emotion")

str_replace_all(top_reviews, "Pixar", "Pixar Animation Studios")

str_count(str_to_lower(user_reviews), "\\b[i]\\b")

mean(str_count(top_reviews, "[^\\d],[^\\d]"))
mean(str_count(user_reviews, "[^\\d],[^\\d]"))
```

