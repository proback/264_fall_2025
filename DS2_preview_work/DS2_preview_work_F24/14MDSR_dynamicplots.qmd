---
title: "MDSR2e Ch 14: Dynamic and customized data graphics"
output:
  pdf_document: default
  html_document:
    df_print: paged
execute:
  echo: true
  warning: false
  message: false
editor_options:
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false

#| no longer needed:
#| knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

# Goals

-   To

# Required reading

-   [Chapter 5](https://openintro-ims.netlify.app/explore-numerical.html) of your textbook

# New Code

-   `mosaic::favstats(dataset$var)`, provides summary statistics for variable `var` from `dataset`

# Before class

Let's start by loading a subset of data used for the story by doing the following command in R

```{r}
#| Section 14.1: Rich Web content using D3.js and htmlwidgets

#| D3 (data-driven documents) is a JavaScript library that produces really nice client-side dynamic data graphics (computations happen in the client's browser). In R, htmlwidgets provides a bridge between R and D3

#| Section 14.1.1: Leaflet.  This will be covered in Ch 17 on spatial data

#| Section 14.1.2: Plot.ly.  Convert any ggplot2 object to a plotly object, where things like brushing and mouse-over annotations are automatic 

library(tidyverse)
library(mdsr)
library(babynames)

#| create basic time trends of names of the 4 Beatles
Beatles <- babynames %>%
  filter(name %in% c("John", "Paul", "George", "Ringo") & sex == "M") %>%
  mutate(name = factor(name, levels = c("John", "George", "Paul", "Ringo")))
beatles_plot <- ggplot(data = Beatles, aes(x = year, y = n)) +
  geom_line(aes(color = name), size = 2)
beatles_plot

#| convert to plotly - can see exact values with mouse-over
library(plotly)
ggplotly(beatles_plot)

#| Section 14.1.3: DataTables.  Quickly make data tables interactive.

library(DT)
datatable(Beatles, options = list(pageLength = 10))

#| Section 14.1.4: Dygraphs.  Interactive time series plots with zooming and brushing.

library(dygraphs)
#| note form of data for dygraphs - time values in column 1, and groups for unique lines in other columns
Beatles %>% 
  filter(sex == "M") %>% 
  select(year, name, prop) %>%
  pivot_wider(names_from = name, values_from = prop) %>%
  dygraph(main = "Popularity of Beatles names over time") %>% 
  dyRangeSelector(dateWindow = c("1940", "1980"))

#| Section 14.1.5: Steamgraphs.  Compare time series using area as a visual cue

# remotes::install_github("hrbrmstr/streamgraph")  # choose 3 for no updates
library(streamgraph)
Beatles %>% 
  streamgraph(key = "name", value = "n", date = "year") %>%
  sg_fill_brewer("Accent")


#| Section 14.2: Animation

library(gganimate)
library(transformr)  # currently does not work since this load failed
beatles_animation <- beatles_plot + 
  transition_states(
    name,
    transition_length = 2,
    state_length = 1
  ) +
  enter_grow() + 
  exit_shrink()

animate(beatles_animation, height = 400, width = 800)


#| Section 14.3: Flexdashboard.  A common way of presenting data to decision makers.  Need to do in a separate R markdown file - see 14_3MDSR_flexdashboard.qmd.  Note that this isn't fully interactive - changes in Chart B don't affect any other charts.


#| Section 14.4: Interactive web apps with Shiny.  Create interactive web applications and dynamic dashboards.  

#| First we use ui.R and server.R files to produce an interactive display of Beatles names.  Note that server.R extracts the reactive objects using the input object from ui.R, then the renderPlot() function returns a reactive object called plot that is referenced in ui.R

#| run shiny locally now that ui.R and server.R exist in this folder
library(shiny)
runApp('~/R/DS2/14_4MDSR_shiny_beatles')

#| Next we put everything in app.R and add even more features to the health violations data from NYC.  Might have space issues if choose all boroughs
runApp('~/R/DS2/14_4MDSR_shiny_NYChealth')


#| Section 14.5: Customization of ggplot2 graphics (much of this was likely covered in DS1)

#| a theme defines 97 different attributes
length(theme_grey())

#| panel background and grid control the distinctive grey background and white grid lines
theme_grey() %>%
  pluck("panel.background")
theme_grey() %>%
  pluck("panel.grid")

#| compare grey (default) and bw themes
beatles_plot
beatles_plot + theme_bw()

#| customize elements of the theme
beatles_plot + 
  theme(
    panel.background = element_rect(fill = "cornsilk"),
    panel.grid.major = element_line(color = "dodgerblue")
  )

#| available colors
colors()

#| create a new theme by modifying some of the 97 attributes
theme_mdsr <- function(base_size = 12, base_family = "Helvetica") {
   theme_grey(base_size = base_size, base_family = base_family) %+replace%
     theme(
       axis.text         = element_text(size = rel(0.8)),
       axis.ticks        = element_line(color = "black"),
       legend.key        = element_rect(color = "grey80"),
       panel.background  = element_rect(fill = "whitesmoke", color = NA),
       panel.border      = element_rect(fill = NA, color = "grey50"),
       panel.grid.major  = element_line(color = "grey80", size = 0.2),
       panel.grid.minor  = element_line(color = "grey92", size = 0.5),
       strip.background  = element_rect(fill = "grey80", color = "grey50", 
         size = 0.2)
     )
}

beatles_plot + facet_wrap(~name) + theme_mdsr()

#| the ggthemes packages has lots of cool stuff.  Skip the xkcd code in the book


#| Section 14.6: Extended example - Hot dog eating.  Try to recreate a plot from the New York Times

#| read in data
hd <- read_csv(
  "http://datasets.flowingdata.com/hot-dog-contest-winners.csv"
) %>%
  janitor::clean_names()
glimpse(hd)

#| add estimated values from early years by hand
new_data <- tibble(
  year = c(1979, 1978, 1974, 1972, 1916), 
  winner = c(NA, "Walter Paul", NA, NA, "James Mullen"),
  dogs_eaten = c(19.5, 17, 10, 14, 13),
  country = rep(NA, 5), new_record = c(1,1,0,0,0)
)
hd <- hd %>%
  bind_rows(new_data)
glimpse(hd)

#| draw only certain years on axes
xlabs <- c(1916, 1972, 1980, 1990, 2007)
ylabs <- seq(from = 0, to = 70, by = 10)

#| define subset for plotting
hd_plot <- hd %>% 
  filter(year < 2008)

#| start with a basic plot
p <- ggplot(data = hd_plot, aes(x = year, y = dogs_eaten)) +
  geom_col()
p

#| customize the plot
ticks_y <- tibble(x = 1912, y = ylabs)
text <- tribble(
  ~x, ~y, ~label, ~adj,
  # Frank Dellarosa
  1953, 37, paste(
    "Frank Dellarosa eats 21 and a half HDBs over 12",
    "\nminutes, breaking the previous record of 19 and a half."), 0,
  # Joey Chestnut
  1985, 69, paste(
    "For the first time since 1999, an American",
    "\nreclaims the title when Joey Chestnut",
    "\nconsumes 66 HDBs, a new world record."), 0, 
  # Kobayashi
  1972, 55, paste(
    "Through 2001-2005, Takeru Kobayashi wins by no less",
    "\nthan 12 HDBs. In 2006, he only wins by 1.75. After win-",
    "\nning 6 years in a row and setting the world record 4 times,",
    "\nKobayashi places second in 2007."), 0,
  # Walter Paul
  1942, 26, paste(
    "Walter Paul sets a new",
    "\nworld record with 17 HDBs."), 0,
  # James Mullen
  1917, 10.5, paste(
    "James Mullen wins the inaugural",
    "\ncontest, scarfing 13 HDBs. Length",
    "\nof contest unavailable."), 0, 
  1935, 72, "NEW WORLD RECORD", 0,
  1914, 72, "Hot dogs and buns (HDBs)", 0,
  1940, 2, "*Data between 1916 and 1972 were unavailable", 0, 
  1922, 2, "Source: FlowingData", 0,
)

segments <- tribble(
  ~x, ~y,
  c(1978, 1991, 1991, NA), c(37, 37, 21, NA),
  c(2004, 2007, 2007, NA), c(69, 69, 66, NA), 
  c(1998, 2006, 2006, NA), c(58, 58, 53.75, NA),
  c(2005, 2005, NA), c(58, 49, NA),
  c(2004, 2004, NA), c(58, 53.5, NA),
  c(2003, 2003, NA), c(58, 44.5, NA),
  c(2002, 2002, NA), c(58, 50.5, NA),
  c(2001, 2001, NA), c(58, 50, NA),
  c(1955, 1978, 1978), c(26, 26, 17)
) %>% 
  unnest(cols = c(x, y))

p + 
  geom_col(aes(fill = factor(new_record))) +
  geom_hline(yintercept = 0, color = "darkgray") + 
  scale_fill_manual(name = NULL, 
    values = c("0" = "#006f3c", "1" = "#81c450")
  ) +
  scale_x_continuous(
    name = NULL, breaks = xlabs, minor_breaks = NULL, 
    limits = c(1912, 2008), expand = c(0, 1)
  ) +
  scale_y_continuous(
    name = NULL, breaks = ylabs, labels = NULL, 
    minor_breaks = NULL, expand = c(0.01, 1)
  ) + 
  geom_text(
    data = ticks_y, aes(x = x, y = y + 2, label = y), 
    size = 3
  ) +
  labs(
    title = "Winners from Nathan's Hot Dog Eating Contest",
    subtitle = paste(
      "Since 1916, the annual eating competition has grown substantially", 
      "attracting competitors from around\nthe world.",
      "This year's competition will be televised on July 4, 2008",
      "at 12pm EDT live on ESPN.\n\n\n"
    )
  ) +
  geom_text(
    data = text, aes(x = x, y = y, label = label), 
    hjust = "left", size = 3
  ) +
  geom_path(
    data = segments, aes(x = x, y = y), col = "darkgray"
  ) + 
  # Key
  geom_rect(
    xmin = 1933, ymin = 70.75, xmax = 1934.3, ymax = 73.25, 
    fill = "#81c450", color = "white"
  ) + 
  guides(fill = FALSE) + 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid.major.y = 
      element_line(color = "gray", linetype = "dotted"),
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 10),
    axis.ticks.length = unit(0, "cm")
  )

```
