---
title: "MDSR Ch 15: Database querying using SQL"
format:
  html: default
execute:
  echo: true
  warning: false
  message: false
editor_options:
  chunk_output_type: inline
---
  
```{r}
#| message: false
#| warning: false

library(tidyverse)
library(mdsr)
library(dbplyr)
library(DBI)
```

```{r}
# connect to the scidb server on Amazon Web Services - the airlines 
# database lives on a remote server
db <- dbConnect_scidb("airlines")
flights <- tbl(db, "flights")
planes <- tbl(db, "planes")
```


```{sql, connection = db}
#SHOW PROCESSLIST;
#KILL QUERY ID 104;
```

## On Your Own - Practice with SQL

These problems are based on class exercises from MSCS 164 in Fall 2023, so you've already solved them in R!  Now we're going to try to duplicate those solutions in SQL.

```{r}
# Read in 2013 NYC flights data
library(nycflights13)
flights_nyc13 <- nycflights13::flights
planes_nyc13 <- nycflights13::planes
```


1. Summarize carriers flying to MSP by number of flights and proportion that are cancelled (assuming that a missing arrival time indicates a cancelled flight).  [This was #4 in 17_longer_pipelines.Rmd.]

```{r}
# Original solution from MSCS 164
flights_nyc13 |>
  mutate(carrier = fct_collapse(carrier, "Delta +" = c("DL", "9E"), 
                                      "American +"= c("AA", "MQ"), 
                                     "United +" = c("EV", "OO", "UA"))) |>
  filter(dest == "MSP") |>   
  group_by(origin, carrier) |>
  summarize(n_flights = n(), 
            num_cancelled = sum(is.na(arr_time)),
            prop_cancelled = mean(is.na(arr_time)))
```

First duplicate the output above, then check trends across all years and origins.  Here are a few hints:

- use flights instead of flights_nyc13
- remember that flights_nyc13 only contained 2013 and 3 NYC origin airports (EWR, JFK, LGA)
- is.na can be replaced with CASE WHEN arr_time = 'NA' THEN 1 ELSE 0 END
- CASE WHEN can also be used replace fct_collapse


Duplicate 2013 NYC analysis:

```{sql, connection = db}
SELECT carrier, dest, arr_time, origin, year, 
  SUM(1) AS n_flights,
  SUM(CASE WHEN arr_time = 'NA' THEN 1 ELSE 0 END) AS num_cancelled,
  AVG(CASE WHEN arr_time = 'NA' THEN 1 ELSE 0 END) AS prop_cancelled,
  CASE WHEN (carrier = "DL" OR carrier = "9E") THEN 'Delta +'
    WHEN (carrier = "AA" OR carrier = "MQ") THEN 'American +'
    WHEN (carrier = "EV" OR carrier = "OO" OR carrier = "UA") THEN 'United +'
    ELSE 'Other' END AS new_carrier
FROM flights
WHERE dest = "MSP" AND year = 2013 AND (origin = "EWR" OR origin = "JFK" OR origin = "LGA")
GROUP BY origin, new_carrier
ORDER BY prop_cancelled DESC;
```


2. Plot number of flights vs. proportion cancelled for every origin-destination pair (assuming that a missing arrival time indicates a cancelled flight).  [This was #7 in 17_longer_pipelines.Rmd.]

```{r}
# Original solution from MSCS 164
flights_nyc13 |>
  group_by(origin, dest) |>
  summarize(n = n(),
            prop_cancelled = mean(is.na(arr_time))) |>
  filter(prop_cancelled < 1) |>
  ggplot(aes(n, prop_cancelled)) + 
  geom_point()
```

First duplicate the plot above, then check trends across all years and origins.  Do all of the data wrangling in SQL.  Here are a few hints:

- use flights instead of flights_nyc13
- remember that flights_nyc13 only contained 2013 and 3 NYC origin airports (EWR, JFK, LGA)
- use an `sql` chunk and an `r` chunk
- include `connection = ` and `output.var = ` in your sql chunk header (this doesn't seem to work with dbGetQuery()...)


Duplicate 2013 NYC analysis:

```{sql, connection = db, output.var = "plot_data"}
SELECT origin, dest, arr_time,
  SUM(1) AS n,
  AVG(CASE WHEN arr_time = 'NA' THEN 1 ELSE 0 END) AS prop_cancelled
FROM flights
WHERE year = 2013 AND (origin = "EWR" OR origin = "JFK" OR origin = "LGA")
GROUP BY origin, dest
HAVING prop_cancelled < 1
```

```{r}
plot_data |>
  ggplot(aes(n, prop_cancelled)) + 
  geom_point()
```


3. Produce a table of weighted plane age by carrier, where weights are based on number of flights per plane.  [This was #6 in 26_more_joins.Rmd.]

```{r}
# Original solution from MSCS 164
flights_nyc13 |>
  left_join(planes_nyc13, join_by(tailnum)) |>
  mutate(plane_age = 2013 - year.y) |>
  group_by(carrier) |>
  summarize(unique_planes = n_distinct(tailnum),
            mean_weighted_age = mean(plane_age, na.rm =TRUE),
            sd_weighted_age = sd(plane_age, na.rm =TRUE)) |>
  arrange(mean_weighted_age)
```

First duplicate the output above, then check trends across all years and origins.  Do all of the data wrangling in SQL.  Here are a few hints:

- use flights instead of flights_nyc13
- remember that flights_nyc13 only contained 2013 and 3 NYC origin airports (EWR, JFK, LGA)
- you'll have to merge the flights dataset with the planes dataset
- you can use DISTINCT inside a COUNT()


Duplicate 2013 NYC analysis:

```{sql, connection = db, output.var = "test"}
SELECT carrier, 
  COUNT(DISTINCT o.tailnum) AS unique_planes,
  AVG(o.year - p.year) AS mean_weighted_age,
  STDDEV_SAMP(o.year - p.year) AS sd_weighted_age
FROM flights AS o
LEFT JOIN planes p ON o.tailnum = p.tailnum
WHERE o.year = 2013 AND (origin = "EWR" OR origin = "JFK" OR origin = "LGA")
GROUP BY carrier
ORDER BY mean_weighted_age ASC
```

```{r}
test
```

