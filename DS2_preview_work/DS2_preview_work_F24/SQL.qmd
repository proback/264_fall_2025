---
title: "Ch 15 from Modern Data Science with R"
subtitle: "Database querying using SQL"
format: html
editor: source
---

```{r, setup, include = FALSE}
# Initial packages required (we'll be adding more)
library(tidyverse)
library(mdsr)      # package associated with our MDSR book
```

In this chapter, we will explore approaches for working with data sets that are larger than what we've been exploring so far; for example, they will fit on a personal computer’s hard disk, but not necessarily in its memory.  Thankfully, a venerable solution for retrieving what we'll call medium-sized data from a database has been around since the 1970s: SQL (structured query language). Database management systems implementing SQL provide a ubiquitous architecture for storing and querying data that is relational in nature.  The wide deployment of SQL makes it a “must-know” tool for data scientists.


```{r}
db <- dbConnect_scidb("airlines")
flights <- tbl(db, "flights")
carriers <- tbl(db, "carriers")

class(flights)
dim(flights)
```



```{r}
library(dbplyr)
```


When using `dplyr` with a `tbl_sql` backend, one must be careful to use expressions that SQL can understand.  See the example below involving `paste0`, which is not recoginized by SQL.  This is just one more reason why it is important to know SQL on its own and not rely entirely on the dplyr front-end (as wonderful as it is).


### Section 15.2: Flat-file databases

Be able to describe the difference between flat-file databases and relational databases, along with limitations of flat-files databases.


### Section 15.3: The SQL universe

Become familiar with major implementations of SQL.  We will focus on MySQL.


### Section 15.4: The SQL data manipulation language

```{r}
library(DBI)

dbGetQuery(db,'
  SHOW TABLES;
')

dbGetQuery(db,'
  DESCRIBE airports;
')
```

In newer versions of RStudio you can run current `sql` chunks in a quarto document using the right arrow.  For now, the chunk below will only run when you render (knit) the entire document.

```{sql, connection = db}
  DESCRIBE airports;
```


```{sql, connection = db, output.var = "mydataframe"}
SELECT 
  c.name,
  SUM(1) AS N, 
  SUM(arr_delay <= 15) / SUM(1) AS pct_ontime
FROM flights AS f
JOIN carriers AS c ON f.carrier = c.carrier
WHERE year = 2016 AND month = 9
  AND dest = 'JFK'
GROUP BY name 
HAVING N >= 100
ORDER BY pct_ontime DESC
LIMIT 0,4;
```

```{r}
mydataframe
```

